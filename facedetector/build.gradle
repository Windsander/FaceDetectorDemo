apply plugin: 'com.android.library'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21//rootProject.ext.android.minSdkVersion
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                arguments "-DOpenCV_DIR=" + project(':opencv').projectDir + "/native/jni",
                        "-DOpenCV_BASE_DIR=" + project(':opencv').projectDir,
                        '-DANDROID_PLATFORM=android-19',
                        '-DANDROID_TOOLCHAIN=clang',
                        '-DANDROID_STL=c++_static',
                        '-DCMAKE_BUILD_TYPE=Release ..'
                cppFlags "-std=c++11 -O3"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false //project.hasProperty('IS_PROGUARD') ? (Boolean.valueOf(IS_PROGUARD)) : rootProject.ext.android.proguardEnabled
            consumerProguardFiles 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            jniDebuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                moduleName "face_lib"
                stl "stlport_static"
                ldLibs "log"
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    ndkVersion '23.0.7196353 rc2'
}

dependencies {
    // implementation fileTree(dir: 'libs', include: ['*.jar'])
    api project(':opencv')
}

//task to delete the old jar
task deleteOldJar(type: Delete) {
    delete 'release/AndroidPlugin.jar'
}

//task to export contents as jar
task exportJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('release/')
    include('classes.jar')
    rename('classes.jar', 'AndroidPlugin.jar')
}

exportJar.dependsOn(deleteOldJar, build)

